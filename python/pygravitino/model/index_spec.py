# coding: utf-8

"""
    Gravitino REST API

    Defines the specification for the first version of the Gravitino REST API.   # noqa: E501

    The version of the OpenAPI document: 0.4.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pygravitino import schemas  # noqa: F401


class IndexSpec(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "indexType",
            "fieldNames",
        }
        
        class properties:
            
            
            class indexType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "primary_key": "PRIMARY_KEY",
                        "unique_key": "UNIQUE_KEY",
                    }
                
                @schemas.classproperty
                def PRIMARY_KEY(cls):
                    return cls("primary_key")
                
                @schemas.classproperty
                def UNIQUE_KEY(cls):
                    return cls("unique_key")
        
            @staticmethod
            def fieldNames() -> typing.Type['FieldNames']:
                return FieldNames
            
            
            class name(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'name':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "indexType": indexType,
                "fieldNames": fieldNames,
                "name": name,
            }
    
    indexType: MetaOapg.properties.indexType
    fieldNames: 'FieldNames'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["indexType"]) -> MetaOapg.properties.indexType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fieldNames"]) -> 'FieldNames': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["indexType", "fieldNames", "name", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["indexType"]) -> MetaOapg.properties.indexType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fieldNames"]) -> 'FieldNames': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["indexType", "fieldNames", "name", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        indexType: typing.Union[MetaOapg.properties.indexType, str, ],
        fieldNames: 'FieldNames',
        name: typing.Union[MetaOapg.properties.name, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'IndexSpec':
        return super().__new__(
            cls,
            *_args,
            indexType=indexType,
            fieldNames=fieldNames,
            name=name,
            _configuration=_configuration,
            **kwargs,
        )

from pygravitino.model.field_names import FieldNames
