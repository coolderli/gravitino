# coding: utf-8

"""
    Gravitino REST API

    Defines the specification for the first version of the Gravitino REST API.   # noqa: E501

    The version of the OpenAPI document: 0.4.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pygravitino import schemas  # noqa: F401


class MetalakeUpdateRequest(
    schemas.ComposedSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        @staticmethod
        def discriminator():
            return {
                '@type': {
                    'RemoveMetalakePropertyRequest': RemoveMetalakePropertyRequest,
                    'RenameMetalakeRequest': RenameMetalakeRequest,
                    'SetMetalakePropertyRequest': SetMetalakePropertyRequest,
                    'UpdateMetalakeCommentRequest': UpdateMetalakeCommentRequest,
                    'removeProperty': RemoveMetalakePropertyRequest,
                    'rename': RenameMetalakeRequest,
                    'setProperty': SetMetalakePropertyRequest,
                    'updateComment': UpdateMetalakeCommentRequest,
                }
            }
        
        @classmethod
        @functools.lru_cache()
        def one_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                RenameMetalakeRequest,
                UpdateMetalakeCommentRequest,
                SetMetalakePropertyRequest,
                RemoveMetalakePropertyRequest,
            ]


    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MetalakeUpdateRequest':
        return super().__new__(
            cls,
            *_args,
            _configuration=_configuration,
            **kwargs,
        )

from pygravitino.model.remove_metalake_property_request import RemoveMetalakePropertyRequest
from pygravitino.model.rename_metalake_request import RenameMetalakeRequest
from pygravitino.model.set_metalake_property_request import SetMetalakePropertyRequest
from pygravitino.model.update_metalake_comment_request import UpdateMetalakeCommentRequest
